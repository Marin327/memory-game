// src/components/MemoryBoard.js
import React, { useState } from "react";
import { View, Text, TouchableOpacity, StyleSheet } from "react-native";

// –°–∏–º–≤–æ–ª–∏—Ç–µ –∑–∞ –∫–∞—Ä—Ç–∏—Ç–µ
const symbols = ["üçï", "üöÄ", "üé©", "üåü", "üê±", "üéÆ", "üçé", "üê∂"];

// –§—É–Ω–∫—Ü–∏—è –∑–∞ —Ä–∞–∑–±—ä—Ä–∫–≤–∞–Ω–µ –Ω–∞ –∫–∞—Ä—Ç–∏—Ç–µ
function shuffleDeck() {
  const doubled = [...symbols, ...symbols]; // –î—É–±–ª–∏—Ä–∞–º–µ —Å–∏–º–≤–æ–ª–∏—Ç–µ –∑–∞ –∫–∞—Ä—Ç–∏—Ç–µ
  return doubled
    .sort(() => Math.random() - 0.5) // –†–∞–∑–±—ä—Ä–∫–≤–∞–º–µ –∫–∞—Ä—Ç–∏—Ç–µ
    .map((symbol, index) => ({ id: index, symbol, matched: false })); // –í—Ä—ä—â–∞–º–µ –∫–∞—Ä—Ç–∞ —Å id, —Å–∏–º–≤–æ–ª –∏ —Å—ä—Å—Ç–æ—è–Ω–∏–µ
}

function MemoryBoard({ setMoves, setIsWin, isRunning }) {
  const [deck, setDeck] = useState(shuffleDeck()); // –°—ä—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–∏—Ç–µ
  const [flipped, setFlipped] = useState([]); // –ö–∞—Ä—Ç–∏—Ç–µ, –∫–æ–∏—Ç–æ —Å–∞ –æ–±—ä—Ä–Ω–∞—Ç–∏
  const [matched, setMatched] = useState([]); // –°—ä—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å—ä–≤–ø–∞–¥–µ–Ω–∏—è—Ç–∞
  const [lockBoard, setLockBoard] = useState(false); // –ó–∞ –¥–∞ –±–ª–æ–∫–∏—Ä–∞–º–µ –∏–∑–±–æ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–∏ –ø–æ –≤—Ä–µ–º–µ –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è
  const [moves, setLocalMoves] = useState(0); // –õ–æ–∫–∞–ª–µ–Ω –±—Ä–æ–π —Ö–æ–¥–æ–≤–µ

  // –§—É–Ω–∫—Ü–∏—è –∑–∞ –∫–ª–∏–∫–≤–∞–Ω–µ –≤—ä—Ä—Ö—É –∫–∞—Ä—Ç–∞
  const handleCardClick = (index) => {
    if (lockBoard || flipped.includes(index) || !isRunning) return; // –ê–∫–æ –∫–∞—Ä—Ç–∞—Ç–∞ –µ –≤–µ—á–µ –æ–±—ä—Ä–Ω–∞—Ç–∞ –∏–ª–∏ –∏–≥—Ä–∞—Ç–∞ –Ω–µ —Ç–µ—á–µ, –Ω–µ –ø—Ä–∞–≤–∏–º –Ω–∏—â–æ

    const newFlipped = [...flipped, index];
    setFlipped(newFlipped); // –î–æ–±–∞–≤—è–º–µ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ –æ–±—ä—Ä–Ω–∞—Ç–∞—Ç–∞ –∫–∞—Ä—Ç–∞

    // –ö–æ–≥–∞—Ç–æ –∏–º–∞–º–µ 2 –æ–±—ä—Ä–Ω–∞—Ç–∏ –∫–∞—Ä—Ç–∏
    if (newFlipped.length === 2) {
      setLockBoard(true); // –ë–ª–æ–∫–∏—Ä–∞–º–µ –∏–∑–±–æ—Ä–∏—Ç–µ, –¥–æ–∫–∞—Ç–æ –Ω–µ –ø—Ä–∏–∫–ª—é—á–∏ –∞–Ω–∏–º–∞—Ü–∏—è—Ç–∞

      const [first, second] = newFlipped;
      if (deck[first].symbol === deck[second].symbol) {
        // –ê–∫–æ –∫–∞—Ä—Ç–∏—Ç–µ —Å—ä–≤–ø–∞–¥–∞—Ç, –¥–æ–±–∞–≤—è–º–µ —Å–∏–º–≤–æ–ª–∞ –∫—ä–º —Å–ø–∏—Å—ä–∫–∞ —Å "matched"
        setMatched((prev) => [...prev, deck[first].symbol]);
        setTimeout(() => {
          setFlipped([]); // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –æ–±—ä—Ä–Ω–∞—Ç–∏—Ç–µ –∫–∞—Ä—Ç–∏
          setLockBoard(false); // –†–∞–∑–±–ª–æ–∫–∏—Ä–∞–º–µ –¥—ä—Å–∫–∞—Ç–∞
        }, 1000); // –í—Ä–µ–º–µ –∑–∞ –∞–Ω–∏–º–∞—Ü–∏—è
      } else {
        setTimeout(() => {
          setFlipped([]); // –ê–∫–æ –Ω–µ —Å—ä–≤–ø–∞–¥–∞—Ç, –∏–∑—á–∏—Å—Ç–≤–∞–º–µ –æ–±—ä—Ä–Ω–∞—Ç–∏—Ç–µ –∫–∞—Ä—Ç–∏
          setLockBoard(false); // –†–∞–∑–±–ª–æ–∫–∏—Ä–∞–º–µ –¥—ä—Å–∫–∞—Ç–∞
        }, 1000); // –í—Ä–µ–º–µ –∑–∞ –∞–Ω–∏–º–∞—Ü–∏—è
      }

      setLocalMoves((m) => m + 1); // –£–≤–µ–ª–∏—á–∞–≤–∞–º–µ –±—Ä–æ—è –Ω–∞ —Ö–æ–¥–æ–≤–µ—Ç–µ
      setMoves((prevMoves) => prevMoves + 1); // –ò–∑–ø—Ä–∞—â–∞–º–µ –±—Ä–æ—è –Ω–∞ —Ö–æ–¥–æ–≤–µ—Ç–µ –≤ —Ä–æ–¥–∏—Ç–µ–ª—Å–∫–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    }
  };

  return (
    <View style={styles.board}>
      {deck.map((card, index) => (
        <TouchableOpacity
          key={card.id}
          style={[
            styles.card,
            flipped.includes(index) && styles.flipped,
            matched.includes(card.symbol) && styles.matched,
          ]}
          onPress={() => handleCardClick(index)}
        >
          <Text style={styles.cardText}>
            {flipped.includes(index) || matched.includes(card.symbol) ? card.symbol : "‚ùì"}
          </Text>
        </TouchableOpacity>
      ))}
    </View>
  );
}

const styles = StyleSheet.create({
  board: {
    flexDirection: "row",
    flexWrap: "wrap",
    justifyContent: "center",
    marginTop: 20,
  },
  card: {
    width: 70,
    height: 70,
    margin: 5,
    backgroundColor: "#f0f0f0",
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 8,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.2,
    shadowRadius: 5,
  },
  flipped: {
    backgroundColor: "#ddd",
  },
  matched: {
    backgroundColor: "#4caf50", // –∑–µ–ª–µ–Ω –∑–∞ —Å—ä–≤–ø–∞–¥–Ω–∞–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏
  },
  cardText: {
    fontSize: 24,
  },
});

export default MemoryBoard;
